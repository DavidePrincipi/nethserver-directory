#!/usr/bin/perl

#
# Copyright (C) 2014 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;

use esmith::AccountsDB;
use esmith::event;
use File::Temp qw(tempfile);

my $file = shift;
my $separator = shift;
my $accountsDb = esmith::AccountsDB->open() || die("Could not open accounts DB");

if($file) {
    open(FH, "<", $file) or die;
} else {
    open(FH, "-");
}

if( ! $separator) {
    $separator = "\t";
}

while(<FH>) {
    
    # Remove trailing whitespace:
    chomp $_;
    $_ =~ s/\s+$//;

    my ($username, $firstName, $lastName, $email, $password) = split(/$separator/, $_);

    if( ! $username) {
        next;
    }

    if( ! $firstName) {
        warn "[WARNING] Account `$username` is missing FirstName column: skipped.\n";
        next;
    }

    if( ! $lastName) {
        warn "[WARNING] Account `$username` is missing LastName column: skipped.\n";
        next;
    }

    if($accountsDb->get($username)) {
        warn "[WARNING] Account `$username` already registered: skipped.\n";
        next;
    }

    my $record = $accountsDb->new_record($username, {
        'type' => 'user',
        'FirstName' => $firstName,
        'LastName' => $lastName,
        'MailStatus' => 'enabled',
        'Samba' => 'enabled'
    });

    if( ! $record ) {
        warn "[ERROR] Account `$username` record creation failed.\n";
        next;
    }
    
    if( ! esmith::event::event_signal('user-create', $username) ) {
        warn "[ERROR] Account `$username` user-create event failed.\n";
        next;
    }

    if($email) {
        my $pseudonym = $email;
        if($email !~ /@/) {
            $pseudonym .= '@';
        }
        
        if($accountsDb->get($pseudonym)) {
            warn "[WARNING] Email `$pseudonym` already exists. Ignored.\n";         
        } elsif($accountsDb->new_record($pseudonym, {
            'type'=>'pseudonym', 
            'Account'=>$username,
            'Access'=>'public',
            'Description'=>'',          
        })) {
            esmith::event::event_signal('pseudonym-create', $pseudonym);
        } else {
            warn "[ERROR] Email `$pseudonym` creation failed.\n";                   
        }
    }

    if($password) {
        my ($pfh, $pfilename) = tempfile('import_users_XXXXX', UNLINK=>0, DIR=>'/tmp');
        print $pfh $password;
        close($pfh);

        if( ! esmith::event::event_signal('password-modify', $username, $pfilename) ) {
            warn "[ERROR] Account `$username` user-create event failed.\n";
            next;
        }
        unlink $pfilename;
    }

    warn "[INFO] imported $username\n";

}

