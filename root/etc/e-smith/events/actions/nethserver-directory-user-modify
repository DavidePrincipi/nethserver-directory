#!/usr/bin/perl -w

#
# Copyright (C) 2014 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# Copyright (C) 1999, 2000 e-smith, inc.
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use NethServer::Database::Passwd;
use esmith::ConfigDB;
use NethServer::Directory::LDAP;
use NethServer::Directory;

my $event = shift;
my $userName = shift;
my $shell = shift || '/usr/libexec/openssh/sftp-server';
my $firstName = shift || '';
my $lastName = shift || '';
my $phone = shift || '';
my $company = shift || '';
my $dept = shift || '';
my $city = shift || '';
my $street = shift || '';

my $errors = 0;

my $db = esmith::ConfigDB->open_ro() || die("Could not open Config DB");
my $passwd = esmith::db->open("NethServer::Database::Passwd") || die("Could not open Passwd DB");
my $ldap = NethServer::Directory::LDAP->new;
my $base = NethServer::Directory::getInternalSuffix();
my $contactRecord = $db->get('OrganizationContact');


if( ! $userName ) {
    warn("[ERROR] Missing username argument");
    exit(1);
}

if( ! $contactRecord ) {
    warn("[ERROR] Could not open OrganizationContact record");
    exit(1);
}

# Handle users with and without domain part
my $account = undef;
if ($userName =~ /@/) {
    $account = $passwd->get($userName);
    $userName = (split(/@/,$userName))[0];
} else {
    my $domain = $db->get_value('DomainName');
    $account = $passwd->get($userName.'@'.$domain);
}
if( ! $account) {
    die "[ERROR] Account `$userName` not found.\n";
}

# Update First and Last Name fields through libuser
my $lusermod = '/usr/sbin/lusermod';

my $cn = $firstName . ' ' . $lastName;

$cn =~ s/^\s+//g;
$cn =~ s/\s+$//g;

if( ! $cn) {
    exit(0);
}

my $gecos = $cn;
# gecos must be 7bit ASCII/ldap IA5String. Refs #911
$gecos =~ s/[^\x20-\x7F]//g;

if($cn) {
    system($lusermod, 
	   '--surname=' . $lastName, 
	   '--givenname=' . $firstName, 
	   '--commonname=' . $cn,
           '--shell=' . $shell,
           '--gecos=' . $gecos,
	   $userName);
}
if($? != 0) {
    $errors ++;
}

# Update extra info directly into LDAP tree

my @attrs = ();
my $dn = "uid=$userName,ou=People,$base";

$phone = $phone || $contactRecord->prop('PhoneNumber') || '';
$company = $company || $contactRecord->prop('Company') || '';
$dept = $dept || $contactRecord->prop('Department') || '';
$city = $city || $contactRecord->prop('City') || '';
$street = $street || $contactRecord->prop('Street') || '';

push @attrs, (telephoneNumber => $phone) unless $phone =~ /^\s*$/;
push @attrs, (o => $company) unless $company =~ /^\s*$/;
push @attrs, (ou => $dept) unless $dept =~ /^\s*$/;
push @attrs, (l => $city) unless $city =~ /^\s*$/;
push @attrs, (street => $street) unless $street =~ /^\s*$/;

my $result = $ldap->modify ($dn, replace => \@attrs);
if($result->is_error()) {
    warn("[ERROR] Failed to set contact info on entry `$dn`: " . $result->error) ;
    $errors ++;
}

if ($errors) {
    die("[ERROR] Failed to modify user `$userName` fields!\n");
}

exit(0);
