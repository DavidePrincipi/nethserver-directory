#!/usr/bin/perl
#
# Copyright (C) 2012 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use NethServer::Directory;
use esmith::ConfigDB;

my $ldap = NethServer::Directory->new or die("No LDAP connection");
my $configDb = esmith::ConfigDB->open_ro() || die('Could not open ConfigDB');
my %OrganizationContact = $configDb->get('OrganizationContact')->props or {'Company' => 'Not Set'};
my $LdapInternalSuffix = NethServer::Directory::getInternalSuffix();
my $errors = 0;

$ldap->loadLdifSchema('cosine', '/etc/openldap/schema/cosine.ldif') || die("Could not load cosine LDIF schema");
$ldap->loadLdifSchema('nis', '/etc/openldap/schema/nis.ldif') || die("Could not load nis LDIF schema");
$ldap->loadLdifSchema('inetorgperson', '/etc/openldap/schema/inetorgperson.ldif') || die("Could not load inetorgperson LDIF schema");

#
# DIT (Directory Information Tree) setup 
#
my %OrganizationContact = $configDb->get('OrganizationContact')->props or {'Company' => 'Not Set'};

my @entries = (
    [ $LdapInternalSuffix,
      attrs => [
	  objectClass => ['top', 'dcObject', 'organization'],
	  dc => 'directory',
	  o => $OrganizationContact{Company},
      ] ],    
    [ 'ou=People,' . $LdapInternalSuffix,
      attrs => [
	  objectClass => ['top', 'organizationalUnit'],
	  ou => 'People',
      ] ],
    [ 'ou=Groups,' . $LdapInternalSuffix,
      attrs => [
	  objectClass => ['top', 'organizationalUnit'],
	  ou => 'Groups',
      ] ],
    );


foreach(@entries) {
    my $message = $ldap->merge(@{$_});
    if($message->is_error) {
	warn 'Error modifying `' . @{$_}[0] . '`: ' . join(" ", $message->code, $message->error_name());
	$errors++;
    }
}

#
# Create pam, libuser, ldapservice internal accounts (ACL permissions are
# configured below).
#
$ldap->configServiceAccount('libuser') || $errors++;
$ldap->configServiceAccount('ldapservice') || $errors++;

# Configure default ACLs in a unique block:
foreach ( join ' ',
    qq(by dn.exact="cn=libuser,$LdapInternalSuffix" peername.ip="127.0.0.1" write),
    qq(by * read)
) {
    $ldap->enforceAccessDirective($_, '*') || $errors++;
}

# Access to userPassword attribute is subject to stronger restrictions:
foreach ( join ' ',
    qq(by dn.exact="cn=libuser,$LdapInternalSuffix" peername.ip="127.0.0.1" write),
    qq(by self write),
    qq(by * peername.ip="127.0.0.1" auth),
    qq(by * ssf=71 auth),
    qq(by * none)
) {
    $ldap->enforceAccessDirective($_, 'userPassword') || $errors++;
}

exit( ($errors > 0) ? 1 : 0 );

