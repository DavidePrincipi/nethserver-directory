#!/usr/bin/perl

#
# Copyright (C) 2017 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use esmith::AccountsDB;
use esmith::ConfigDB;
use esmith::event;
use User::pwent;
use User::grent;
use File::stat;
use Data::Dumper;
use File::Temp;
use File::Path;
use POSIX qw(strftime);
use NethServer::Migrate qw(migrateDir parseShadow);
use Carp;
use strict;


my $event = shift;
my $sourceDir = shift;
my $esmithDbDir = '/home/e-smith/db';
my $errors = 0;
my $timestamp = strftime('%Y%m%d%H%M%S', localtime());

if( ! -d $sourceDir) {
    die("Could not find $sourceDir");
}

my $srcAccountsDb = esmith::AccountsDB->open_ro(join('', $sourceDir, $esmithDbDir, '/accounts')) || die("Could not open source accounts database in $sourceDir \n");

my @users = $srcAccountsDb->get_all_by_prop(type=>'user');
my @groups = $srcAccountsDb->get_all_by_prop(type=>'group');
my $shadowDb = parseShadow($sourceDir . '/etc/shadow');

#
# Users migration:
#
foreach my $srcUser (@users, $srcAccountsDb->get('admin')) {
    my $userName = $srcUser->key;
    my $fullName = join(' ', $srcUser->prop('FirstName'), $srcUser->prop('LastName'));

    #
    # USER-CREATE event; skip for already existing admin user:
    #
    if($userName ne 'admin') {
        if( ! esmith::event::event_signal('user-create', $userName, $fullName)) {
            warn "[ERROR] user-create event failed for user " . $userName . "\n";
            $errors ++;
        }
    }

    #
    # Replace userPassword attribute in LDAP, using shadow(3) pwdp field
    #
    if($shadowDb->{$userName} && $shadowDb->{$userName}->{pwdp}) {
        open(PH, '|-', '/usr/sbin/lpasswd -f 0 ' . $userName . ' >/dev/null 2>&1');
        print PH $shadowDb->{$userName}->{pwdp};
        if( ! close(PH)) {
            warn "[ERROR] failed to restore password for user $userName\n";
            $errors ++;
        }
    }

    my $userPwEnt = getpwnam($userName);
    
    if( ! $userPwEnt) {
        warn "[ERROR] Could not find $userName in Unix user DB\n";
        $errors ++;
        next;
    }

    #
    # Migrate user's home directory
    #
    my $srcHomeDir = $sourceDir . '/home/e-smith/files/users/' . $userName;
    my $homeDir = $userPwEnt->dir;

    if( ! -d $srcHomeDir) {
        warn "[WARNING] The source home directory does not exist, ignoring $srcHomeDir";
        next;
    }

    if( ! migrateDir($srcHomeDir, $homeDir) ) {
        warn "[ERROR] Could not migrate $userName home directory!\n";
        $errors ++;
    } else {
        system("chown -R $userName $homeDir");
        if($? != 0) {
            warn "[ERROR] Changing home dir ownership failed for $userName\n";
            $errors ++;
        }
    }

}

#
# Groups migration
#
foreach my $srcGroup (@groups) {

    if( ! esmith::event::event_signal('group-create', $srcGroup->key, split(/,/, $srcGroup->prop('Members')))) {
        warn "[ERROR] Failed to migrate group " . $srcGroup->key . "\n";
        $errors ++;
    }

}

if($errors > 0) {
    warn "[WARNING] $errors error(s) occurred in $0 action\n";
    exit(1);
}

exit($errors > 0 ? 1 : 0);
