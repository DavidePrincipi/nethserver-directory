#!/usr/bin/perl

#
# Copyright (C) 2014 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use User::pwent;
use NethServer::Directory;
use NethServer::Password;
use File::Temp qw(tempfile);
use esmith::AccountsDB;
use esmith::event;

my $ldap = NethServer::Directory->new() or die("Cannot connect LDAP server");
my $accountsDb = esmith::AccountsDB->open() or die("Could not open AccountsDB");
my $errors = 0;

if(is_admin_in_ldap()) {
    exit(0); # nothing to do
}

#
# admin entry is not in LDAP: create it. If an admin account already
# exists, preserve uid and passwd fields from system passwd DB,
# otherwise use the existing root password.
#

my $pwhash = undef;
my $adminEntry = getpwnam('admin');
if(defined $adminEntry) {
    warn "[WARNING] found an existing admin account in passwd database.\n";

    # Fix Uid prop in accounts DB:
    $accountsDb->set_prop('admin', 'Uid', $adminEntry->uid, type => 'user');

    # Save current admin password:
    $pwhash = $adminEntry->passwd;

    # Delete admin account
    system(qw(/usr/sbin/userdel -f admin));
} else {
    # Don't set a default password hash Refs #3026
    $pwhash = undef;
}

if( ! esmith::event::event_signal('user-create', 'admin')) {
    warn "[ERROR] admin account creation failed!\n";
    exit(1);
}

if( ! defined $pwhash) {
    # pass
} elsif( ! set_admin_pwhash($pwhash)) {
    warn "[ERROR] failed to set admin password hash\n";
    exit(2);
}

# Add the admin to adm group
if(system(qw(/usr/sbin/usermod -a -G adm admin)) != 0) {
    warn "[ERROR] failed to add admin into 'adm' group\n";
    exit(3);
}

exit(0);

# ---------------------------
#    Utility functions
# ---------------------------

# Set the given password hash to admin's account in LDAP DB:
sub set_admin_pwhash
{
    my $hash = shift;
    return ! $ldap->merge('uid=admin,ou=People,dc=directory,dc=nh',
		 attrs => ['userPassword', "{CRYPT}" . $hash])->is_error();
}

sub is_admin_in_ldap
{
    my $res = $ldap->search(
	base => 'ou=People,dc=directory,dc=nh',
	filter => "uid=admin",
	scope => 'one',
	);
    return ($res->count() > 0);
}
